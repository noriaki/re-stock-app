## 重要

ユーザはプログラミングが得意ですが、時短のために私にコーディングを依頼しています。

2回以上連続でテストを失敗した時は、現在の状況を整理して、一緒に解決方法を考えます。

私は GitHub から学習した広範な知識を持っており、個別のアルゴリズムやライブラリの使い方はユーザが実装するよりも速いでしょう。テストコードを書いて動作確認しながら、ユーザに説明しながらコードを書きます。

反面、現在のコンテキストに応じた処理は苦手です。コンテキストが不明瞭な時は、ユーザに確認します。また、全ての会話は日本語で行います。

## 作業開始準備

`git status` で現在の git のコンテキストを確認します。
もし指示された内容と無関係な変更が多い場合、現在の変更からユーザーに別のタスクとして開始するように提案してください。

無視するように言われた場合は、そのまま続行します。


# Clineのメモリバンク

私は専門的なソフトウェアエンジニアであり、特徴的な性質を持っています：セッション間で私の記憶は完全にリセットされます。これは制限ではなく、完璧なドキュメントを維持する原動力です。各リセット後、プロジェクトを理解し効果的に作業を継続するために、私は完全にメモリバンクに依存します。すべてのタスクの開始時に、すべてのメモリバンクファイルを読むことは必須であり、これは任意ではありません。

## メモリバンクの構造

以下のファイルは `.cline/memory/*` の下に保存されます。

メモリバンクは、必須のコアファイルと任意のコンテキストファイルで構成され、すべてMarkdown形式です。ファイルは明確な階層で構築されています：

```mermaid
flowchart TD
    PB[projectbrief.md] --> PC[productContext.md]
    PB --> SP[systemPatterns.md]
    PB --> TC[techContext.md]

    PC --> AC[activeContext.md]
    SP --> AC
    TC --> AC

    AC --> P[progress.md]
```

### コアファイル（必須）

1. `projectbrief.md`
   - 他のすべてのファイルの形を決める基盤文書
   - 存在しない場合はプロジェクト開始時に作成
   - コア要件と目標を定義
   - プロジェクト範囲の信頼できる情報源

2. `productContext.md`
   - このプロジェクトが存在する理由
   - 解決する問題
   - どのように機能すべきか
   - ユーザー体験の目標

3. `activeContext.md`
   - 現在の作業の焦点
   - 最近の変更
   - 次のステップ
   - アクティブな決定事項と考慮事項

4. `systemPatterns.md`
   - システムアーキテクチャ
   - 重要な技術的決定
   - 使用中の設計パターン
   - コンポーネントの関係

5. `techContext.md`
   - 使用されている技術
   - 開発環境のセットアップ
   - 技術的制約
   - 依存関係

6. `progress.md`
   - 機能している部分
   - 構築すべき残りの部分
   - 現在のステータス
   - 既知の問題

### 追加コンテキスト

組織化に役立つ場合は、memory-bank/内に追加のファイル/フォルダを作成します：

- 複雑な機能のドキュメント
- 統合仕様
- APIドキュメント
- テスト戦略
- デプロイ手順

## コアワークフロー

### 計画モード

```mermaid
flowchart TD
    Start[Start] --> ReadFiles[Read Memory Bank]
    ReadFiles --> CheckFiles{Files Complete?}

    CheckFiles -->|No| Plan[Create Plan]
    Plan --> Document[Document in Chat]

    CheckFiles -->|Yes| Verify[Verify Context]
    Verify --> Strategy[Develop Strategy]
    Strategy --> Present[Present Approach]
```

### 実行モード

```mermaid
flowchart TD
    Start[Start] --> Context[Check Memory Bank]
    Context --> Update[Update Documentation]
    Update --> Rules[Update .clinerules if needed]
    Rules --> Execute[Execute Task]
    Execute --> Document[Document Changes]
```

## ドキュメントの更新

メモリバンクの更新は以下の場合に行われます：

1. 新しいプロジェクトパターンの発見時
2. 重要な変更を実装した後
3. ユーザーが**update
   memory**を要求した場合（すべてのファイルを確認する必要があります）
4. コンテキストの明確化が必要な場合

```mermaid
flowchart TD
    Start[Update Process]

    subgraph Process
        P1[Review ALL Files]
        P2[Document Current State]
        P3[Clarify Next Steps]
        P4[Update .clinerules]

        P1 --> P2 --> P3 --> P4
    end

    Start --> Process
```

注意：**update
memory**によってトリガーされた場合、一部のファイルが更新を必要としなくても、すべてのメモリバンクファイルを確認する必要があります。特に現在の状態を追跡するactiveContext.mdとprogress.mdに焦点を当てます。

## プロジェクトインテリジェンス（.clinerules）

.clinerules
ファイルは各プロジェクトの学習ジャーナルです。コードだけからは明らかでない重要なパターン、設定、プロジェクトインテリジェンスを捉え、より効果的に作業するのに役立ちます。あなたとプロジェクトと一緒に作業する中で、重要な洞察を発見し文書化します。

```mermaid
flowchart TD
    Start{Discover New Pattern}

    subgraph Learn [Learning Process]
        D1[Identify Pattern]
        D2[Validate with User]
        D3[Document in .clinerules]
    end

    subgraph Apply [Usage]
        A1[Read .clinerules]
        A2[Apply Learned Patterns]
        A3[Improve Future Work]
    end

    Start --> Learn
    Learn --> Apply
```

### 記録すべき内容

- 重要な実装パス
- ユーザーの好みとワークフロー
- プロジェクト固有のパターン
- 既知の課題
- プロジェクト決定の進化
- ツール使用パターン

形式は柔軟です -
あなたとプロジェクトとより効果的に作業するのに役立つ貴重な洞察を捉えることに焦点を当てます。.clinerules
は、一緒に作業するにつれてよりスマートになる生きたドキュメントと考えてください。

覚えておいてください：すべてのメモリリセット後、私は完全に新しく始めます。メモリバンクは以前の作業への唯一のリンクです。私の効果は完全にその正確さに依存するため、精度と明確さを持って維持する必要があります。

## 記憶量とデータの読み方

私の記憶領域は有限であり、巨大なファイルを読み込まないようにする必要があります。

`*.json` や `*.jsonl` を read-file する前には、`ls -al <file>`
でファイルサイズを確認してください。

会話が続きすぎた場合、 memorybank
を更新してコンテキストを終了することをユーザーに提案してください。


## GitHub Flow ワークフロー

このドキュメントでは、開発サイクルとしてのブランチ管理の方法と、コミットとプルリクエストの作成に関するベストプラクティスを説明します。
開発サイクルとして GitHub Flow を採用します。main ブランチにマージ済みの feature ブランチはローカルとリモートの両方とも削除します。

### GitHub Flow の基本ステップ

GitHub Flow は以下の 6 つの基本ステップで構成されるシンプルなワークフローです：

1. **ブランチの作成**: `main`ブランチから新しい機能ブランチを作成
2. **変更の追加**: 機能の実装やバグ修正を行い、適切にコミット
3. **プルリクエストの作成**: 変更をレビューするためのプルリクエストを作成
4. **レビューと議論**: コードレビューを行い、必要に応じて変更を加える
5. **デプロイとテスト**: 変更をテスト環境にデプロイして検証
6. **マージ**: レビューとテストが完了したら`main`ブランチにマージ

### 1. ブランチの作成

新しい機能やバグ修正を開始する際は、常に最新の`main`ブランチから新しいブランチを作成します：

```bash
# 最新のmainブランチを取得
git checkout main
git pull origin main

# 新しい機能ブランチを作成
git checkout -b feature/new-feature-name
```

ブランチ名の命名規則：

- 機能追加: `feature/機能名`
- バグ修正: `fix/バグ内容`
- リファクタリング: `refactor/内容`
- ドキュメント: `docs/内容`

### 2. 変更の追加とコミットの作成

機能ブランチで作業を行い、小さな単位で変更をコミットします。コミットを作成する際は、以下の手順に従います：

#### 1. 変更の確認

```bash
# 未追跡ファイルと変更の確認
git status

# 変更内容の詳細確認
git --no-pager diff

# コミットメッセージのスタイル確認
git --no-pager log
```

#### 2. 変更の分析

- 変更または追加されたファイルの特定
- 変更の性質（新機能、バグ修正、リファクタリングなど）の把握
- プロジェクトへの影響評価
- 機密情報の有無確認

#### 3. コミットメッセージの作成

- 「なぜ」に焦点を当てる
- 明確で簡潔な言葉を使用
- 変更の目的を正確に反映
- 一般的な表現を避ける

#### 4. コミットの実行

```bash
# 関連ファイルのみをステージング
git add <files>

# コミットメッセージの作成（HEREDOCを使用）
git commit -m "$(cat <<'EOF'
feat: ユーザー認証にResult型を導入

- エラー処理をより型安全に
- エラーケースの明示的な処理を強制
- テストの改善

🤖 ${K4}で生成
Co-Authored-By: Claude noreply@anthropic.com
EOF
)"
```

### 3. プルリクエストの作成

変更が完了したら、リモートリポジトリにプッシュしてプルリクエストを作成します：

```bash
# リモートリポジトリにプッシュ
git push -u origin feature/new-feature-name
```

プルリクエストを作成する際は、以下の手順に従います：

#### 1. ブランチの状態確認

```bash
# 未コミットの変更確認
git status

# 変更内容の確認
git --no-pager diff

# mainからの差分確認
git --no-pager diff main...HEAD

# コミット履歴の確認
git --no-pager log
```

#### 2. 変更の分析

- main から分岐後のすべてのコミットの確認
- 変更の性質と目的の把握
- プロジェクトへの影響評価
- 機密情報の有無確認

#### 3. プルリクエストの作成

```bash
# プルリクエストの作成（HEREDOCを使用）
gh pr create --title "feat: Result型によるエラー処理の改善" --body "$(cat <<'EOF'
## 概要

エラー処理をより型安全にするため、Result型を導入しました。

## 変更内容

- neverthrowを使用したResult型の導入
- エラーケースの明示的な型定義
- テストケースの追加

## レビューのポイント

- Result型の使用方法が適切か
- エラーケースの網羅性
- テストの十分性
EOF
)"
```

### 4. レビューと議論

プルリクエストが作成されたら、チームメンバーによるコードレビューを行います：

- レビューコメントに対応して必要な変更を加える
- 追加の変更は同じブランチにコミットしてプッシュする
- 議論が解決したらレビュアーの承認を得る

### 5. デプロイとテスト

多くの場合、プルリクエストの変更はテスト環境に自動的にデプロイされます：

- デプロイされた環境で機能が正しく動作することを確認
- 必要に応じて追加のテストを実行
- 問題が見つかった場合は修正してプッシュ

### 6. マージと後処理

レビューとテストが完了したら、プルリクエストを`main`ブランチにマージします：

```bash
# GitHubのUIでマージするか、コマンドラインの場合：
git checkout main
git merge --no-ff feature/new-feature-name
git push origin main

# マージ済みのブランチを削除
git branch -d feature/new-feature-name
git push origin --delete feature/new-feature-name
```

### 重要な注意事項

1. コミット関連

   - 可能な場合は `git commit -am` を使用
   - 関係ないファイルは含めない
   - 空のコミットは作成しない
   - git 設定は変更しない

2. プルリクエスト関連

   - 必要に応じて新しいブランチを作成
   - 変更を適切にコミット
   - リモートへのプッシュは `-u` フラグを使用
   - すべての変更を分析

3. 避けるべき操作
   - 対話的な git コマンド（-i フラグ）の使用
   - リモートリポジトリへの直接プッシュ
   - git 設定の変更

### コミットメッセージの例

```bash
# 新機能の追加
feat: Result型によるエラー処理の導入

# 既存機能の改善
update: キャッシュ機能のパフォーマンス改善

# バグ修正
fix: 認証トークンの期限切れ処理を修正

# リファクタリング
refactor: Adapterパターンを使用して外部依存を抽象化

# テスト追加
test: Result型のエラーケースのテストを追加

# ドキュメント更新
docs: エラー処理のベストプラクティスを追加

# 見た目の変更（コード動作に影響しない）
style: ボタンを押しやすくするためにラベルテキストの左右余白を増加
```

### プルリクエストの例

```markdown
## 概要

TypeScript のエラー処理をより型安全にするため、Result 型を導入しました。

## 変更内容

- neverthrow ライブラリの導入
- API クライアントでの Result 型の使用
- エラーケースの型定義
- テストケースの追加

## 技術的な詳細

- 既存の例外処理を Result 型に置き換え
- エラー型の共通化
- モック実装の改善

## レビューのポイント

- Result 型の使用方法が適切か
- エラーケースの網羅性
- テストの十分性
```


# Re-Stock アプリのアーキテクチャ設計

## 全体構造

Re-Stock アプリは以下のディレクトリ構造に従って実装します：

```
src/
├── app/                 # Next.js App Router
├── components/          # UIコンポーネント
│   ├── ui/              # 基本UIコンポーネント（shadcn/ui）
│   └── features/        # 機能別コンポーネント
├── domain/              # ドメインモデル
│   ├── models/          # エンティティと値オブジェクト
│   ├── repositories/    # データアクセス抽象化
│   └── services/        # ドメインサービス
├── lib/                 # ユーティリティ関数
├── stores/              # 状態管理
└── types/               # 型定義
```

## レイヤー構造

アプリケーションは以下の4つの主要レイヤーで構成されます：

1. **プレゼンテーションレイヤー** (components/, app/)
   - ユーザーインターフェース
   - ユーザー入力の処理
   - 状態の表示

2. **アプリケーションレイヤー** (stores/)
   - ユースケースの実装
   - 状態管理
   - ドメインサービスの調整

3. **ドメインレイヤー** (domain/)
   - ビジネスロジック
   - エンティティと値オブジェクト
   - ドメインサービス

4. **インフラストラクチャレイヤー** (domain/repositories/ の実装)
   - データの永続化
   - 外部サービスとの連携
   - 技術的な詳細の実装

## 依存関係の方向

依存関係は内側に向かって流れるようにします：

```
プレゼンテーション → アプリケーション → ドメイン ← インフラストラクチャ
```

- ドメインレイヤーは他のレイヤーに依存しない
- インフラストラクチャレイヤーはドメインレイヤーに依存する
- アプリケーションレイヤーはドメインレイヤーに依存する
- プレゼンテーションレイヤーはアプリケーションレイヤーとドメインレイヤーに依存する

## 技術スタック

- **フレームワーク**: Next.js (App Router)
- **言語**: TypeScript
- **UIライブラリ**: React
- **スタイリング**: Tailwind CSS + shadcn/ui
- **状態管理**: Zustand
- **データ永続化**: localStorage (初期実装)
- **バリデーション**: zod
- **テスト**: Jest + React Testing Library

## 開発プロセス

- GitHub Flowに基づくブランチ戦略
- Pull Requestベースの開発
- テスト駆動開発 (TDD)
- 継続的インテグレーション (CI)


# コーディングプラクティス

## 原則

### 関数型アプローチ (FP)

- 純粋関数を優先
- 不変データ構造を使用
- 副作用を分離
- 型安全性を確保

### ドメイン駆動設計 (DDD)

- 値オブジェクトとエンティティを区別
- 集約で整合性を保証
- リポジトリでデータアクセスを抽象化
- 境界付けられたコンテキストを意識

### テスト駆動開発 (TDD)

- Red-Green-Refactorサイクル
- テストを仕様として扱う
- 小さな単位で反復
- 継続的なリファクタリング

## 実装パターン

### 型定義

```typescript
// ブランデッド型で型安全性を確保
type Branded<T, B> = T & { _brand: B };
type Money = Branded<number, "Money">;
type Email = Branded<string, "Email">;
```

### 値オブジェクト

- 不変
- 値に基づく同一性
- 自己検証
- ドメイン操作を持つ

```typescript
// 作成関数はバリデーション付き
function createMoney(amount: number): Result<Money, Error> {
  if (amount < 0) return err(new Error("負の金額不可"));
  return ok(amount as Money);
}
```

### エンティティ

- IDに基づく同一性
- 制御された更新
- 整合性ルールを持つ

### Result型

```typescript
type Result<T, E> = { ok: true; value: T } | { ok: false; error: E };
```

- 成功/失敗を明示
- 早期リターンパターンを使用
- エラー型を定義

### リポジトリ

- ドメインモデルのみを扱う
- 永続化の詳細を隠蔽
- テスト用のインメモリ実装を提供

### アダプターパターン

- 外部依存を抽象化
- インターフェースは呼び出し側で定義
- テスト時は容易に差し替え可能

## 実装手順

1. **型設計**
   - まず型を定義
   - ドメインの言語を型で表現

2. **純粋関数から実装**
   - 外部依存のない関数を先に
   - テストを先に書く

3. **副作用を分離**
   - IO操作は関数の境界に押し出す
   - 副作用を持つ処理をPromiseでラップ

4. **アダプター実装**
   - 外部サービスやDBへのアクセスを抽象化
   - テスト用モックを用意

## プラクティス

- 小さく始めて段階的に拡張
- 過度な抽象化を避ける
- コードよりも型を重視
- 複雑さに応じてアプローチを調整

## コードスタイル

- 関数優先（クラスは必要な場合のみ）
- 不変更新パターンの活用
- 早期リターンで条件分岐をフラット化
- エラーとユースケースの列挙型定義

## テスト戦略

- 純粋関数の単体テストを優先
- インメモリ実装によるリポジトリテスト
- テスト可能性を設計に組み込む
- アサートファースト：期待結果から逆算


# Re-Stock アプリのコーディング規約

## 命名規則

### ファイル名
- コンポーネントファイル: kebab-case（例: `user-profile.tsx`）
- コンポーネント名: PascalCase（例: `UserProfile`）
- ユーティリティ関数: camelCase（例: `formatDate.ts`）
- 型定義ファイル: kebab-case（例: `user-types.ts`）
- テストファイル: 対象ファイル名 + `.test.ts(x)`（例: `user-profile.test.tsx`）

### 変数・関数名
- 変数名: camelCase（例: `userName`）
- 関数名: camelCase（例: `getUserData`）
- クラス名: PascalCase（例: `UserRepository`）
- インターフェース名: PascalCase（例: `UserData`）
- 型名: PascalCase（例: `UserId`）
- 定数: UPPER_SNAKE_CASE（例: `MAX_RETRY_COUNT`）

### コンポーネントProps
- Props型は明示的に定義する
- Props型名はコンポーネント名 + `Props`（例: `UserProfileProps`）
- 必須でないPropsはオプショナルとして明示する

```typescript
type ButtonProps = {
  label: string;
  onClick: () => void;
  disabled?: boolean;
  variant?: 'primary' | 'secondary' | 'danger';
};
```

## コードフォーマット

- インデント: 2スペース
- 行の最大長: 100文字
- セミコロン: 必須
- クォート: シングルクォート（`'`）を優先
- コンマ: 末尾コンマを使用
- 括弧: 開始括弧は同じ行に配置

```typescript
function example(
  param1: string,
  param2: number,
) {
  // 実装
}
```

## コメント

### 基本方針
- コードは自己説明的であるべき
- 複雑なロジックや非直感的な部分にのみコメントを追加する
- なぜそうしたのか（why）を説明するコメントを優先する
- 何をしているか（what）は明確なコードで表現する

### JSDoc
- 公開APIやライブラリ関数にはJSDocを使用する
- パラメータと戻り値の型を明記する
- 例外がスローされる条件を記述する
- 使用例を含める

```typescript
/**
 * ユーザーIDから詳細情報を取得する
 * @param userId - 取得対象のユーザーID
 * @returns ユーザー情報を含むResult型。エラーの場合はApiErrorを返す
 * @throws ネットワークエラーが発生した場合
 * @example
 * const result = await fetchUserDetails('user123');
 * if (result.ok) {
 *   const user = result.value;
 *   // ユーザー情報を使用
 * }
 */
async function fetchUserDetails(userId: string): Promise<Result<User, ApiError>> {
  // 実装
}
```

## インポート

### 順序
1. 外部ライブラリ
2. 内部モジュール（相対パスではないもの）
3. 相対パスのインポート

```typescript
// 外部ライブラリ
import React, { useState, useEffect } from 'react';
import { z } from 'zod';

// 内部モジュール
import { Button } from '@/components/ui/button';
import { useUserStore } from '@/stores/user-store';

// 相対パスのインポート
import { formatUserName } from '../../utils/format';
import type { UserData } from './types';
```

### エイリアス
- `@/`プレフィックスを使用して絶対パスインポートを行う
- 深いネストを避けるために適切なエイリアスを設定する

## バージョン管理

### コミット
- 1つの論理的な変更ごとにコミットを作成する
- コミットメッセージは変更内容を明確に伝える
- プレフィックスを使用してコミットの種類を示す（例: `feat:`, `fix:`, `docs:`, `refactor:`）

### ブランチ
- 機能開発は`feature/`ブランチで行う
- バグ修正は`fix/`ブランチで行う
- リリース準備は`release/`ブランチで行う
- 緊急修正は`hotfix/`ブランチで行う

### プルリクエスト
- PRの説明には目的、変更内容、テスト結果を明記する
- レビュー時の注目ポイントを明示する
- 関連するイシューへのリンクを含める


# Re-Stock アプリのドメイン駆動設計 (DDD)

## 基本原則

Re-Stock アプリでは、以下の基本原則に従ってドメイン駆動設計を適用します：

- 値オブジェクトとエンティティを区別する
- 集約を通じて一貫性を確保する
- リポジトリでデータアクセスを抽象化する
- 境界づけられたコンテキストを意識する

## ドメインモデル

### 値オブジェクト

値オブジェクトは以下の特性を持ちます：

- 不変
- 値に基づく同一性
- 自己検証
- ドメイン操作を含む

```typescript
// 値オブジェクトの例
type ItemId = Branded<string, 'ItemId'>;

function createItemId(value: string): Result<ItemId, Error> {
  if (!value || value.trim() === '') {
    return err(new Error('ItemIdは空にできません'));
  }
  return ok(value as ItemId);
}

type ItemName = Branded<string, 'ItemName'>;

function createItemName(value: string): Result<ItemName, Error> {
  if (!value || value.trim() === '') {
    return err(new Error('アイテム名は空にできません'));
  }
  if (value.length > 100) {
    return err(new Error('アイテム名は100文字以内にしてください'));
  }
  return ok(value as ItemName);
}
```

### エンティティ

エンティティは以下の特性を持ちます：

- IDに基づく同一性
- 制御された更新
- 一貫性ルール

```typescript
// エンティティの例
type Item = {
  id: ItemId;
  name: ItemName;
  category: Category;
  brand: BrandName;
  unopenedCount: number;
  openedCount: number;
  threshold: number;
  purchaseUrl: URL | null;
};

function createItem(params: {
  id: ItemId;
  name: ItemName;
  category: Category;
  brand: BrandName;
  unopenedCount: number;
  openedCount: number;
  threshold: number;
  purchaseUrl?: string;
}): Result<Item, Error> {
  // バリデーション
  if (params.unopenedCount < 0) {
    return err(new Error('未開封数は0以上である必要があります'));
  }
  if (params.openedCount < 0) {
    return err(new Error('開封済み数は0以上である必要があります'));
  }
  if (params.threshold < 0) {
    return err(new Error('閾値は0以上である必要があります'));
  }

  // URLの検証
  let purchaseUrl: URL | null = null;
  if (params.purchaseUrl) {
    try {
      purchaseUrl = new URL(params.purchaseUrl);
    } catch {
      return err(new Error('購入URLの形式が正しくありません'));
    }
  }

  return ok({
    id: params.id,
    name: params.name,
    category: params.category,
    brand: params.brand,
    unopenedCount: params.unopenedCount,
    openedCount: params.openedCount,
    threshold: params.threshold,
    purchaseUrl,
  });
}
```

### ドメインサービス

ドメインサービスは、単一のエンティティや値オブジェクトに属さない操作を提供します：

```typescript
// ドメインサービスの例
function isItemLowStock(item: Item): boolean {
  const totalCount = item.unopenedCount + item.openedCount;
  return totalCount <= item.threshold;
}

function getLowStockItems(items: Item[]): Item[] {
  return items.filter(isItemLowStock);
}
```

## リポジトリ

リポジトリはデータアクセスを抽象化します：

```typescript
// リポジトリインターフェース
interface ItemRepository {
  findAll(): Promise<Result<Item[], Error>>;
  findById(id: ItemId): Promise<Result<Item | null, Error>>;
  save(item: Item): Promise<Result<void, Error>>;
  delete(id: ItemId): Promise<Result<void, Error>>;
}

// インメモリ実装（テスト用）
class InMemoryItemRepository implements ItemRepository {
  private items: Map<string, Item> = new Map();

  async findAll(): Promise<Result<Item[], Error>> {
    return ok(Array.from(this.items.values()));
  }

  async findById(id: ItemId): Promise<Result<Item | null, Error>> {
    const item = this.items.get(id);
    return ok(item || null);
  }

  async save(item: Item): Promise<Result<void, Error>> {
    this.items.set(item.id, { ...item });
    return ok(undefined);
  }

  async delete(id: ItemId): Promise<Result<void, Error>> {
    this.items.delete(id);
    return ok(undefined);
  }
}

// localStorage実装
class LocalStorageItemRepository implements ItemRepository {
  private readonly storageKey = 'items';

  async findAll(): Promise<Result<Item[], Error>> {
    try {
      const data = localStorage.getItem(this.storageKey);
      if (!data) {
        return ok([]);
      }
      return ok(JSON.parse(data));
    } catch (error) {
      return err(new Error('アイテムの取得に失敗しました'));
    }
  }

  // 他のメソッドも同様に実装
}
```

## アプリケーションサービス

アプリケーションサービスはユースケースを実装します：

```typescript
// アプリケーションサービスの例
class ItemService {
  constructor(private readonly itemRepository: ItemRepository) {}

  async addItem(params: {
    name: string;
    category: string;
    brand: string;
    unopenedCount: number;
    openedCount: number;
    threshold: number;
    purchaseUrl?: string;
  }): Promise<Result<Item, Error>> {
    // IDの生成
    const idResult = createItemId(crypto.randomUUID());
    if (!idResult.ok) return idResult;

    // 名前の検証
    const nameResult = createItemName(params.name);
    if (!nameResult.ok) return nameResult;

    // カテゴリの検証
    const categoryResult = createCategory(params.category);
    if (!categoryResult.ok) return categoryResult;

    // ブランド名の検証
    const brandResult = createBrandName(params.brand);
    if (!brandResult.ok) return brandResult;

    // アイテムの作成
    const itemResult = createItem({
      id: idResult.value,
      name: nameResult.value,
      category: categoryResult.value,
      brand: brandResult.value,
      unopenedCount: params.unopenedCount,
      openedCount: params.openedCount,
      threshold: params.threshold,
      purchaseUrl: params.purchaseUrl,
    });
    if (!itemResult.ok) return itemResult;

    // 保存
    const saveResult = await this.itemRepository.save(itemResult.value);
    if (!saveResult.ok) return saveResult;

    return ok(itemResult.value);
  }

  // 他のユースケースも同様に実装
}
```

## 型安全性

### ブランド型

型安全性を確保するためにブランド型を使用します：

```typescript
type Branded<T, B> = T & { _brand: B };

type ItemId = Branded<string, 'ItemId'>;
type ItemName = Branded<string, 'ItemName'>;
type BrandName = Branded<string, 'BrandName'>;
```

### Result型

操作の成功/失敗を明示的に表現するためにResult型を使用します：

```typescript
type Result<T, E> = { ok: true; value: T } | { ok: false; error: E };

function ok<T, E>(value: T): Result<T, E> {
  return { ok: true, value };
}

function err<T, E>(error: E): Result<T, E> {
  return { ok: false, error };
}
```

## 実装アプローチ

1. まず型と、それを処理する関数のインターフェースを考える
2. ドメインの言語を型で表現する
3. 外部依存のない純粋関数から実装する
4. テストを先に書く
5. IO操作は関数の境界に押し出す
6. 外部サービスやDBへのアクセスを抽象化する


## ディレクトリ配置規則

```
app/*                 # アプリケーション
src/*                 # ソースコード
public/               # 静的ファイル
.cline/               # Cline用のディレクトリ
.cline/rules/         # .clinerulesの元となる振る舞い･ルール（ユーザ･Clineの両方が作成･更新する）
.cline/memory/        # メモリバンク（Clineが作成･更新する）
.cline/memory-bank/   # 追加のコンテキストや知識情報（Clineが作成･更新する）
knowledge/            # Cline向けにユーザから提供される知識情報
docs/                 # ユーザ向けドキュメント置き場
```


# Re-Stock アプリの状態管理とエラー処理

## 状態管理の基本方針

Re-Stock アプリでは、以下の基本方針に従って状態管理を行います：

- Zustandを使用した軽量な状態管理
- 状態の種類に応じた適切な管理方法の選択
- 永続化はlocalStorageを使用（初期実装）
- ドメインモデルとの明確な境界を維持

## 状態の種類と管理方法

### グローバル状態

- Zustandを使用
- ストアは機能ごとに分割
- 状態と更新ロジックを明確に分離
- 複雑な更新ロジックは関数として抽出
- 永続化が必要な場合はmiddlewareを使用

```typescript
// アイテムストアの例
import { create } from 'zustand';
import { persist } from 'zustand/middleware';

type ItemStore = {
  items: Item[];
  addItem: (item: Item) => void;
  updateItem: (id: string, updates: Partial<Item>) => void;
  removeItem: (id: string) => void;
};

export const useItemStore = create<ItemStore>()(
  persist(
    (set) => ({
      items: [],
      addItem: (item) => set((state) => ({ items: [...state.items, item] })),
      updateItem: (id, updates) =>
        set((state) => ({
          items: state.items.map((item) =>
            item.id === id ? { ...item, ...updates } : item
          ),
        })),
      removeItem: (id) =>
        set((state) => ({
          items: state.items.filter((item) => item.id !== id),
        })),
    }),
    {
      name: 'item-storage',
    }
  )
);
```

### ローカル状態

- コンポーネント固有の状態にはuseStateを使用
- 関連する複数の状態はuseReducerでまとめる
- 派生状態にはuseMemoを使用
- フォーム状態には適切なフォームライブラリを検討

```typescript
// useReducerの例
type FormState = {
  name: string;
  category: string;
  brand: string;
  unopenedCount: number;
  openedCount: number;
  threshold: number;
  purchaseUrl: string;
};

type FormAction =
  | { type: 'SET_FIELD'; field: keyof FormState; value: any }
  | { type: 'RESET' };

function formReducer(state: FormState, action: FormAction): FormState {
  switch (action.type) {
    case 'SET_FIELD':
      return { ...state, [action.field]: action.value };
    case 'RESET':
      return initialState;
    default:
      return state;
  }
}

// コンポーネント内での使用
const [formState, dispatch] = useReducer(formReducer, initialState);
```

### サーバー状態

- サーバーコンポーネントを活用したデータフェッチング
- クライアントコンポーネントではSWRまたはReact Queryを検討
- エラー状態とローディング状態の適切な処理

## データフロー

1. ユーザーアクション → コンポーネント
2. コンポーネント → ストア（アクション）
3. ストア → リポジトリ（データ操作）
4. リポジトリ → 永続化層
5. 状態更新 → コンポーネント再レンダリング

## エラー処理

### Result型を使用したエラーハンドリング

```typescript
type Result<T, E> = { ok: true; value: T } | { ok: false; error: E };

// 成功の場合
function ok<T, E>(value: T): Result<T, E> {
  return { ok: true, value };
}

// 失敗の場合
function err<T, E>(error: E): Result<T, E> {
  return { ok: false, error };
}
```

### エラー型の定義

```typescript
type ApiError =
  | { type: 'network'; message: string }
  | { type: 'notFound'; message: string }
  | { type: 'unauthorized'; message: string }
  | { type: 'validation'; message: string; fields: Record<string, string> };
```

### エラーハンドリングの例

```typescript
async function fetchItem(id: string): Promise<Result<Item, ApiError>> {
  try {
    const response = await fetch(`/api/items/${id}`);
    if (!response.ok) {
      switch (response.status) {
        case 404:
          return err({ type: 'notFound', message: 'アイテムが見つかりません' });
        case 401:
          return err({ type: 'unauthorized', message: '認証されていません' });
        default:
          return err({
            type: 'network',
            message: `HTTPエラー: ${response.status}`,
          });
      }
    }
    return ok(await response.json());
  } catch (error) {
    return err({
      type: 'network',
      message: error instanceof Error ? error.message : '不明なエラー',
    });
  }
}

// 使用例
const result = await fetchItem('123');
if (result.ok) {
  // 成功時の処理
  const item = result.value;
  // ...
} else {
  // エラー時の処理
  switch (result.error.type) {
    case 'notFound':
      // 見つからない場合の処理
      break;
    case 'unauthorized':
      // 認証エラーの処理
      break;
    // ...
  }
}
```

### ユーザーへのエラー表示

- エラーの種類に基づいた適切なユーザーフィードバック
- グローバルエラー状態の管理
- トースト通知やインライン表示の使い分け

## パフォーマンス最適化

### 状態更新の最適化

- 不要な再レンダリングを避ける
- 状態の正規化を検討
- 大きなリストには仮想化を検討
- メモ化を適切に使用

### メモ化の活用

```typescript
// useMemoの例
const filteredItems = useMemo(
  () => items.filter((item) => item.category === selectedCategory),
  [items, selectedCategory]
);

// useCallbackの例
const handleItemUpdate = useCallback(
  (id: string, updates: Partial<Item>) => {
    updateItem(id, updates);
  },
  [updateItem]
);
```

## 永続化戦略

- localStorageを使用した基本的な永続化
- Zustandのpersistミドルウェアの活用
- 将来的にはFirebaseなどのBaaSも検討可能
- オフライン対応の検討

## 状態管理のテスト

- ストアのテスト
- アクションのテスト
- 副作用のテスト
- モックを使用したテスト


# Re-Stock アプリのテスト戦略

## テスト駆動開発 (TDD)

### 基本原則

テスト駆動開発（TDD）は以下のサイクルで進める開発手法です：

1. **Red**: まず失敗するテストを書く
2. **Green**: テストが通るように最小限の実装をする
3. **Refactor**: コードをリファクタリングして改善する

### 実装戦略

- **テストは仕様である**: テストコードは実装の仕様を表現したもの
- 小さな単位で反復する
- 継続的なリファクタリングを行う

## テストフレームワーク

- **Jest**: Next.js のデフォルトテストフレームワーク
- **React Testing Library**: UI コンポーネントのテスト
- **Cypress**: E2E テスト（必要に応じて）

## テスト種別

### 単体テスト

- 各関数、コンポーネントに対するテストを作成する
- テスト名は「状況 → 操作 → 結果」の形式に従う
- モックは最小限に抑え、実際の振る舞いをテストする
- エッジケースを考慮したテストを含める

### コンポーネントテスト

- React Testing Library を使用する
- ユーザーの視点からテストを書く
- 実装の詳細ではなく、振る舞いをテストする
- アクセシビリティのテストを含める

### 統合テスト

- 複数のコンポーネントやモジュールの連携をテストする
- 実際のユーザーフローに沿ったテストを作成する
- 主要なユースケースをカバーする

### E2E テスト

- 重要なユーザーフローに対してのみ作成する
- 実際のブラウザ環境での動作を確認する
- CI/CD パイプラインに組み込む

## テスト作成の重要な考え方

### Assert-Act-Arrange の順序で考える

1. まず期待する結果（アサーション）を定義
2. 次に操作（テスト対象の処理）を定義
3. 最後に準備（テスト環境のセットアップ）を定義

### テスト名の付け方

テスト名は「状況 → 操作 → 結果」の形式で記述する：

例: 「有効なトークンの場合にユーザー情報を取得すると成功すること」

## リポジトリのテスト

- インメモリ実装を使用したテスト
- 永続化ロジックとドメインロジックを分離してテスト
- エッジケースを考慮したテスト（空の結果、エラーケースなど）

## リファクタリングフェーズのツール

テストが通った後のリファクタリングフェーズでは、以下のツールを活用します：

1. **静的解析・型チェック**:

   - `yarn tsc --noEmit <target>`
   - `yarn lint <target>`

2. **コードカバレッジ測定**:

   - `yarn test --coverage`

3. **Git によるバージョン管理**:
   - 各フェーズ（テスト作成 → 実装 → リファクタリング）後にコミットする
   - タスク完了時にユーザーに確認する

## テスト可能性を高めるための設計

- 依存性の注入を活用する
- 副作用を分離する
- 純粋関数を優先する
- テスト用のモックやスタブを容易に作成できるようにする

## テストデータの管理

- テストデータはテストファイル内で定義する
- 共通のテストデータはファクトリ関数を使用して生成する
- テストごとに必要最小限のデータを使用する
- テストデータは実際のデータに近いものを使用する


## TypeScript

TypeScriptでのコーディングにおける一般的なベストプラクティスをまとめます。

### 方針

- 最初に型と、それを処理する関数のインターフェースを考える
- コードのコメントとして、そのファイルがどういう仕様化を可能な限り明記する
- 実装が内部状態を持たないとき、 class による実装を避けて関数を優先する
- 副作用を抽象するために、アダプタパターンで外部依存を抽象し、テストではインメモリなアダプタで処理する

### 型の使用方針

1. 具体的な型を使用
   - any の使用を避ける
   - unknown を使用してから型を絞り込む
   - Utility Types を活用する

2. 型エイリアスの命名
   - 意味のある名前をつける
   - 型の意図を明確にする
   ```ts
   // Good
   type UserId = string;
   type UserData = {
     id: UserId;
     createdAt: Date;
   };

   // Bad
   type Data = any;
   ```

### エラー処理

1. Result型の使用
   ```ts
   import { err, ok, Result } from "npm:neverthrow";

   type ApiError =
     | { type: "network"; message: string }
     | { type: "notFound"; message: string }
     | { type: "unauthorized"; message: string };

   async function fetchUser(id: string): Promise<Result<User, ApiError>> {
     try {
       const response = await fetch(`/api/users/${id}`);
       if (!response.ok) {
         switch (response.status) {
           case 404:
             return err({ type: "notFound", message: "User not found" });
           case 401:
             return err({ type: "unauthorized", message: "Unauthorized" });
           default:
             return err({
               type: "network",
               message: `HTTP error: ${response.status}`,
             });
         }
       }
       return ok(await response.json());
     } catch (error) {
       return err({
         type: "network",
         message: error instanceof Error ? error.message : "Unknown error",
       });
     }
   }
   ```

2. エラー型の定義
   - 具体的なケースを列挙
   - エラーメッセージを含める
   - 型の網羅性チェックを活用

### 実装パターン

1. 関数ベース（状態を持たない場合）
   ```ts
   // インターフェース
   interface Logger {
     log(message: string): void;
   }

   // 実装
   function createLogger(): Logger {
     return {
       log(message: string): void {
         console.log(`[${new Date().toISOString()}] ${message}`);
       },
     };
   }
   ```

2. classベース（状態を持つ場合）
   ```ts
   interface Cache<T> {
     get(key: string): T | undefined;
     set(key: string, value: T): void;
   }

   class TimeBasedCache<T> implements Cache<T> {
     private items = new Map<string, { value: T; expireAt: number }>();

     constructor(private ttlMs: number) {}

     get(key: string): T | undefined {
       const item = this.items.get(key);
       if (!item || Date.now() > item.expireAt) {
         return undefined;
       }
       return item.value;
     }

     set(key: string, value: T): void {
       this.items.set(key, {
         value,
         expireAt: Date.now() + this.ttlMs,
       });
     }
   }
   ```

3. Adapterパターン（外部依存の抽象化）
   ```ts
   // 抽象化
   type Fetcher = <T>(path: string) => Promise<Result<T, ApiError>>;

   // 実装
   function createFetcher(headers: Record<string, string>): Fetcher {
     return async <T>(path: string) => {
       try {
         const response = await fetch(path, { headers });
         if (!response.ok) {
           return err({
             type: "network",
             message: `HTTP error: ${response.status}`,
           });
         }
         return ok(await response.json());
       } catch (error) {
         return err({
           type: "network",
           message: error instanceof Error ? error.message : "Unknown error",
         });
       }
     };
   }

   // 利用
   class ApiClient {
     constructor(
       private readonly getData: Fetcher,
       private readonly baseUrl: string,
     ) {}

     async getUser(id: string): Promise<Result<User, ApiError>> {
       return await this.getData(`${this.baseUrl}/users/${id}`);
     }
   }
   ```

### 実装の選択基準

1. 関数を選ぶ場合
   - 単純な操作のみ
   - 内部状態が不要
   - 依存が少ない
   - テストが容易

2. classを選ぶ場合
   - 内部状態の管理が必要
   - 設定やリソースの保持が必要
   - メソッド間で状態を共有
   - ライフサイクル管理が必要

3. Adapterを選ぶ場合
   - 外部依存の抽象化
   - テスト時のモック化が必要
   - 実装の詳細を隠蔽したい
   - 差し替え可能性を確保したい

### 一般的なルール

1. 依存性の注入
   - 外部依存はコンストラクタで注入
   - テスト時にモックに置き換え可能に
   - グローバルな状態を避ける

2. インターフェースの設計
   - 必要最小限のメソッドを定義
   - 実装の詳細を含めない
   - プラットフォーム固有の型を避ける

3. テスト容易性
   - モックの実装を簡潔に
   - エッジケースのテストを含める
   - テストヘルパーを適切に分離

4. コードの分割
   - 単一責任の原則に従う
   - 適切な粒度でモジュール化
   - 循環参照を避ける


# Re-Stock アプリの UI 開発ガイドライン

## 基本方針

Re-Stock アプリの UI 開発においては、以下の基本方針に従います：

- Next.js の App ルーターを基本フレームワークとして使用
- TypeScript による型安全な実装
- Tailwind CSS と shadcn/ui を活用したデザインシステム
- レスポンシブデザインとアクセシビリティの確保

## コンポーネント設計

### 基本構造

1. **ファイル命名規則**:

   - コンポーネントファイル: kebab-case（例: `user-profile.tsx`）
   - コンポーネント名: PascalCase（例: `UserProfile`）
   - ユーティリティ関数: camelCase（例: `formatDate`）

2. **コンポーネント分類**:

   - ページコンポーネント（app/ディレクトリ内）
   - 再利用可能な UI コンポーネント（components/ui/）
   - 機能コンポーネント（components/features/）
   - レイアウトコンポーネント（components/layouts/）

3. **型定義**:
   - Props 型は明示的に定義（types/ディレクトリまたはコンポーネントファイル内）
   - 可能な限りブランド型を活用
   - import type を使用して型のみをインポート

### UI コンポーネント (components/ui/)

- shadcn/ui をベースとした再利用可能なコンポーネント
- プレゼンテーショナルコンポーネントとして実装
- ドメイン知識を含まない
- Props を通じてデータと振る舞いを受け取る

### 機能コンポーネント (components/features/)

- 特定の機能やユースケースに関連するコンポーネント
- UI コンポーネントを組み合わせて構成
- 状態管理と連携
- ドメインロジックは直接含まず、アプリケーションレイヤーを通じて利用

### コンポーネント構造

- 関数コンポーネントを使用する
- 小さく、単一責任の原則に従ったコンポーネントを作成する
- 複雑なロジックはカスタムフックに抽出する
- メモ化（React.memo, useMemo, useCallback）を適切に使用する

## スタイリングガイド

### Tailwind CSS

- ユーティリティクラスを基本とする
- 変数ベースの色（`bg-primary`, `text-primary-foreground`など）を使用
- 命名クラスよりもユーティリティクラスを優先
- カスタムクラスは必要最小限にとどめる

### shadcn/ui

- 基本的な UI コンポーネントは可能な限り shadcn/ui を利用
- 必要に応じてカスタマイズする場合も、Tailwind の原則を維持
- カラースキームの一貫性を保つ

## アクセシビリティ対応

### セマンティック HTML

- 適切な HTML 要素を使用（article, section, main, nav, header, footer など）
- 見出しの階層（h1 ～ h6）を適切に維持
- landmark ロールを活用

### ARIA 属性

- 必要に応じて aria-\*属性を設定
- aria-label や aria-describedby でコンテキストを提供
- WAI-ARIA のベストプラクティスに従う

### フォーカス管理

- キーボードナビゲーションをサポート
- フォーカスインジケータを視覚的に明確に
- focus-visible ユーティリティの活用

### スクリーンリーダー対応

- sr-only クラスを使用して視覚的に隠された説明テキストを提供
- 画像には適切な alt 属性を設定
- アイコンやシンボルに意味がある場合は適切なテキスト代替を提供

## データ表示とフォーム

### データ表示

- データ表示は明確で読みやすく
- 適切なフォーマットとグループ化
- スケルトンローダーを用いた読み込み状態の表示
- エラー状態の適切な処理と表示

### フォーム実装

- バリデーションと適切なエラーメッセージ
- アクセシブルなラベル付け
- 入力ヘルパーテキストの提供
- フォームの状態（送信中、成功、エラー）を視覚的に表示

### 検索とフィルタリング

- 直感的な UI
- インクリメンタル検索の実装
- フィルター条件の視覚的な表示
- クリアと初期状態へのリセット機能

## 状態管理

### ローカル状態

- React Hooks を活用（useState, useReducer）
- 状態の範囲を最小限に保つ
- 関連する状態は useReducer でまとめる

### グローバル状態

- Context API や Zustand を活用
- 状態の更新ロジックを明確に分離
- 適切なメモ化でパフォーマンスを最適化

### サーバー状態

- サーバーコンポーネントを活用したデータフェッチング
- クライアントコンポーネントでは SWR または React Query を検討
- エラー状態とローディング状態の適切な処理

## レスポンシブデザイン

- モバイルファーストアプローチ
- Tailwind の修飾子（sm:, md:, lg:, xl:）を活用
- flexbox と grid レイアウトを適切に使用
- メディアクエリは極力避け、Tailwind の修飾子で対応
- タッチインターフェースの最適化（タップ領域の確保、スワイプジェスチャーの対応など）

## パフォーマンス最適化

### レンダリング最適化

- 不要な再レンダリングを避ける（memo, useCallback, useMemo）
- 大きなリストには仮想化を検討
- Code Splitting と Lazy Loading を活用

### 画像最適化

- Next.js Image コンポーネントを使用
- 適切なサイズとフォーマットを指定
- loading="lazy"属性の活用

### バンドルサイズ最適化

- トリーシェイキングが効くように注意
- 重いライブラリは必要な部分だけをインポート
- 非同期インポートと遅延読み込みを検討

## ベストプラクティス

### コンポーネント設計

- 単一責任の原則に従う
- Props drilling を避ける（Context API などを活用）
- コンポーネントは小さく、再利用可能に

### テスト

- React Testing Library を使用したコンポーネントテスト
- アクセシビリティのテスト
- ユーザーインタラクションのテスト
- スナップショットテスト

### ドキュメンテーション

- コンポーネントの使用例を提供
- Props と API の明確な説明
- Storybook 等でのビジュアルドキュメント作成（必要に応じて）
