## 重要

ユーザはプログラミングが得意ですが、時短のために私にコーディングを依頼しています。

2回以上連続でテストを失敗した時は、現在の状況を整理して、一緒に解決方法を考えます。

私は GitHub から学習した広範な知識を持っており、個別のアルゴリズムやライブラリの使い方はユーザが実装するよりも速いでしょう。テストコードを書いて動作確認しながら、ユーザに説明しながらコードを書きます。

反面、現在のコンテキストに応じた処理は苦手です。コンテキストが不明瞭な時は、ユーザに確認します。また、全ての会話は日本語で行います。

## 作業開始準備

`git status` で現在の git のコンテキストを確認します。
もし指示された内容と無関係な変更が多い場合、現在の変更からユーザーに別のタスクとして開始するように提案してください。

無視するように言われた場合は、そのまま続行します。


# コーディングプラクティス

## 原則

### 関数型アプローチ (FP)

- 純粋関数を優先
- 不変データ構造を使用
- 副作用を分離
- 型安全性を確保

### ドメイン駆動設計 (DDD)

- 値オブジェクトとエンティティを区別
- 集約で整合性を保証
- リポジトリでデータアクセスを抽象化
- 境界付けられたコンテキストを意識

### テスト駆動開発 (TDD)

- Red-Green-Refactorサイクル
- テストを仕様として扱う
- 小さな単位で反復
- 継続的なリファクタリング

## 実装パターン

### 型定義

```typescript
// ブランデッド型で型安全性を確保
type Branded<T, B> = T & { _brand: B };
type Money = Branded<number, "Money">;
type Email = Branded<string, "Email">;
```

### 値オブジェクト

- 不変
- 値に基づく同一性
- 自己検証
- ドメイン操作を持つ

```typescript
// 作成関数はバリデーション付き
function createMoney(amount: number): Result<Money, Error> {
  if (amount < 0) return err(new Error("負の金額不可"));
  return ok(amount as Money);
}
```

### エンティティ

- IDに基づく同一性
- 制御された更新
- 整合性ルールを持つ

### Result型

```typescript
type Result<T, E> = { ok: true; value: T } | { ok: false; error: E };
```

- 成功/失敗を明示
- 早期リターンパターンを使用
- エラー型を定義

### リポジトリ

- ドメインモデルのみを扱う
- 永続化の詳細を隠蔽
- テスト用のインメモリ実装を提供

### アダプターパターン

- 外部依存を抽象化
- インターフェースは呼び出し側で定義
- テスト時は容易に差し替え可能

## 実装手順

1. **型設計**
   - まず型を定義
   - ドメインの言語を型で表現

2. **純粋関数から実装**
   - 外部依存のない関数を先に
   - テストを先に書く

3. **副作用を分離**
   - IO操作は関数の境界に押し出す
   - 副作用を持つ処理をPromiseでラップ

4. **アダプター実装**
   - 外部サービスやDBへのアクセスを抽象化
   - テスト用モックを用意

## プラクティス

- 小さく始めて段階的に拡張
- 過度な抽象化を避ける
- コードよりも型を重視
- 複雑さに応じてアプローチを調整

## コードスタイル

- 関数優先（クラスは必要な場合のみ）
- 不変更新パターンの活用
- 早期リターンで条件分岐をフラット化
- エラーとユースケースの列挙型定義

## テスト戦略

- 純粋関数の単体テストを優先
- インメモリ実装によるリポジトリテスト
- テスト可能性を設計に組み込む
- アサートファースト：期待結果から逆算


## ディレクトリ配置規則

```
app/*                 # アプリケーション
src/*                 # ソースコード
public/               # 静的ファイル
.cline/               # Cline用のディレクトリ
.cline/rules/         # .clinerulesの元となる振る舞い･ルール
.cline/memory/        # メモリバンク
.cline/memory-bank/   # 追加のコンテキストや知識情報
docs/                 # ユーザ向けドキュメント置き場
```



# テスト駆動開発 (TDD) の基本

## 基本概念

テスト駆動開発（TDD）は以下のサイクルで進める開発手法です：

1. **Red**: まず失敗するテストを書く
2. **Green**: テストが通るように最小限の実装をする
3. **Refactor**: コードをリファクタリングして改善する

### テストフレームワーク選択

- **Jest**: Next.jsのデフォルトテストフレームワーク
- **React Testing Library**: UIコンポーネントのテスト
- **Cypress**: E2Eテスト（必要に応じて）

## 重要な考え方

- **テストは仕様である**: テストコードは実装の仕様を表現したもの
- **Assert-Act-Arrange の順序で考える**:
  1. まず期待する結果（アサーション）を定義
  2. 次に操作（テスト対象の処理）を定義
  3. 最後に準備（テスト環境のセットアップ）を定義
- **テスト名は「状況→操作→結果」の形式で記述**: 例:
  「有効なトークンの場合にユーザー情報を取得すると成功すること」

## リファクタリングフェーズの重要ツール

テストが通った後のリファクタリングフェーズでは、以下のツールを活用します：

1. **静的解析・型チェック**:
   - `yarn tsc --noEmit <target>`
   - `yarn lint <target>`

2. **コードカバレッジ測定**:
   - `yarn test --coverage`

3. **Gitによるバージョン管理**:
   - 各フェーズ（テスト作成→実装→リファクタリング）の完了時にコミット
   - タスク完了時にはユーザーに確認


## TypeScript

TypeScriptでのコーディングにおける一般的なベストプラクティスをまとめます。

### 方針

- 最初に型と、それを処理する関数のインターフェースを考える
- コードのコメントとして、そのファイルがどういう仕様化を可能な限り明記する
- 実装が内部状態を持たないとき、 class による実装を避けて関数を優先する
- 副作用を抽象するために、アダプタパターンで外部依存を抽象し、テストではインメモリなアダプタで処理する

### 型の使用方針

1. 具体的な型を使用
   - any の使用を避ける
   - unknown を使用してから型を絞り込む
   - Utility Types を活用する

2. 型エイリアスの命名
   - 意味のある名前をつける
   - 型の意図を明確にする
   ```ts
   // Good
   type UserId = string;
   type UserData = {
     id: UserId;
     createdAt: Date;
   };

   // Bad
   type Data = any;
   ```

### エラー処理

1. Result型の使用
   ```ts
   import { err, ok, Result } from "npm:neverthrow";

   type ApiError =
     | { type: "network"; message: string }
     | { type: "notFound"; message: string }
     | { type: "unauthorized"; message: string };

   async function fetchUser(id: string): Promise<Result<User, ApiError>> {
     try {
       const response = await fetch(`/api/users/${id}`);
       if (!response.ok) {
         switch (response.status) {
           case 404:
             return err({ type: "notFound", message: "User not found" });
           case 401:
             return err({ type: "unauthorized", message: "Unauthorized" });
           default:
             return err({
               type: "network",
               message: `HTTP error: ${response.status}`,
             });
         }
       }
       return ok(await response.json());
     } catch (error) {
       return err({
         type: "network",
         message: error instanceof Error ? error.message : "Unknown error",
       });
     }
   }
   ```

2. エラー型の定義
   - 具体的なケースを列挙
   - エラーメッセージを含める
   - 型の網羅性チェックを活用

### 実装パターン

1. 関数ベース（状態を持たない場合）
   ```ts
   // インターフェース
   interface Logger {
     log(message: string): void;
   }

   // 実装
   function createLogger(): Logger {
     return {
       log(message: string): void {
         console.log(`[${new Date().toISOString()}] ${message}`);
       },
     };
   }
   ```

2. classベース（状態を持つ場合）
   ```ts
   interface Cache<T> {
     get(key: string): T | undefined;
     set(key: string, value: T): void;
   }

   class TimeBasedCache<T> implements Cache<T> {
     private items = new Map<string, { value: T; expireAt: number }>();

     constructor(private ttlMs: number) {}

     get(key: string): T | undefined {
       const item = this.items.get(key);
       if (!item || Date.now() > item.expireAt) {
         return undefined;
       }
       return item.value;
     }

     set(key: string, value: T): void {
       this.items.set(key, {
         value,
         expireAt: Date.now() + this.ttlMs,
       });
     }
   }
   ```

3. Adapterパターン（外部依存の抽象化）
   ```ts
   // 抽象化
   type Fetcher = <T>(path: string) => Promise<Result<T, ApiError>>;

   // 実装
   function createFetcher(headers: Record<string, string>): Fetcher {
     return async <T>(path: string) => {
       try {
         const response = await fetch(path, { headers });
         if (!response.ok) {
           return err({
             type: "network",
             message: `HTTP error: ${response.status}`,
           });
         }
         return ok(await response.json());
       } catch (error) {
         return err({
           type: "network",
           message: error instanceof Error ? error.message : "Unknown error",
         });
       }
     };
   }

   // 利用
   class ApiClient {
     constructor(
       private readonly getData: Fetcher,
       private readonly baseUrl: string,
     ) {}

     async getUser(id: string): Promise<Result<User, ApiError>> {
       return await this.getData(`${this.baseUrl}/users/${id}`);
     }
   }
   ```

### 実装の選択基準

1. 関数を選ぶ場合
   - 単純な操作のみ
   - 内部状態が不要
   - 依存が少ない
   - テストが容易

2. classを選ぶ場合
   - 内部状態の管理が必要
   - 設定やリソースの保持が必要
   - メソッド間で状態を共有
   - ライフサイクル管理が必要

3. Adapterを選ぶ場合
   - 外部依存の抽象化
   - テスト時のモック化が必要
   - 実装の詳細を隠蔽したい
   - 差し替え可能性を確保したい

### 一般的なルール

1. 依存性の注入
   - 外部依存はコンストラクタで注入
   - テスト時にモックに置き換え可能に
   - グローバルな状態を避ける

2. インターフェースの設計
   - 必要最小限のメソッドを定義
   - 実装の詳細を含めない
   - プラットフォーム固有の型を避ける

3. テスト容易性
   - モックの実装を簡潔に
   - エッジケースのテストを含める
   - テストヘルパーを適切に分離

4. コードの分割
   - 単一責任の原則に従う
   - 適切な粒度でモジュール化
   - 循環参照を避ける


# UI開発ガイドライン

## 基本方針

ReStockアプリケーションのUI開発においては、以下の基本方針に従います：

- Next.jsのAppルーターを基本フレームワークとして使用
- TypeScriptによる型安全な実装
- Tailwind CSSとshadcn/uiを活用したデザインシステム
- レスポンシブデザインとアクセシビリティの確保

## コンポーネント設計

### 基本構造

1. **ファイル命名規則**:
   - コンポーネントファイル: kebab-case（例: `user-profile.tsx`）
   - コンポーネント名: PascalCase（例: `UserProfile`）
   - ユーティリティ関数: camelCase（例: `formatDate`）

2. **コンポーネント分類**:
   - ページコンポーネント（app/ディレクトリ内）
   - 再利用可能なUIコンポーネント（components/ui/）
   - 機能コンポーネント（components/features/）
   - レイアウトコンポーネント（components/layouts/）

3. **型定義**:
   - Props型は明示的に定義（types/ディレクトリまたはコンポーネントファイル内）
   - 可能な限りブランド型を活用
   - import typeを使用して型のみをインポート

### スタイリングガイド

1. **Tailwind CSS**:
   - ユーティリティクラスを基本とする
   - 変数ベースの色（`bg-primary`, `text-primary-foreground`など）を使用
   - 命名クラスよりもユーティリティクラスを優先
   - カスタムクラスは必要最小限にとどめる

2. **shadcn/ui**:
   - 基本的なUIコンポーネントは可能な限りshadcn/uiを利用
   - 必要に応じてカスタマイズする場合も、Tailwindの原則を維持
   - カラースキームの一貫性を保つ

3. **レスポンシブ対応**:
   - モバイルファーストアプローチ
   - Tailwindの修飾子（sm:, md:, lg:, xl:）を活用
   - flexboxとgridレイアウトを適切に使用
   - メディアクエリは極力避け、Tailwindの修飾子で対応

## アクセシビリティ対応

1. **セマンティックHTML**:
   - 適切なHTML要素を使用（article, section, main, nav, header, footerなど）
   - 見出しの階層（h1～h6）を適切に維持
   - landmarkロールを活用

2. **ARIA属性**:
   - 必要に応じてaria-*属性を設定
   - aria-labelやaria-describedbyでコンテキストを提供
   - WAI-ARIAのベストプラクティスに従う

3. **フォーカス管理**:
   - キーボードナビゲーションをサポート
   - フォーカスインジケータを視覚的に明確に
   - focus-visibleユーティリティの活用

4. **スクリーンリーダー対応**:
   - sr-onlyクラスを使用して視覚的に隠された説明テキストを提供
   - 画像には適切なalt属性を設定
   - アイコンやシンボルに意味がある場合は適切なテキスト代替を提供

## データ表示とフォーム

1. **データ表示**:
   - データ表示は明確で読みやすく
   - 適切なフォーマットとグループ化
   - スケルトンローダーを用いた読み込み状態の表示
   - エラー状態の適切な処理と表示

2. **フォーム実装**:
   - バリデーションと適切なエラーメッセージ
   - アクセシブルなラベル付け
   - 入力ヘルパーテキストの提供
   - フォームの状態（送信中、成功、エラー）を視覚的に表示

3. **検索とフィルタリング**:
   - 直感的なUI
   - インクリメンタル検索の実装
   - フィルター条件の視覚的な表示
   - クリアと初期状態へのリセット機能

## 状態管理

1. **ローカル状態**:
   - React Hooksを活用（useState, useReducer）
   - 状態の範囲を最小限に保つ
   - 関連する状態はuseReducerでまとめる

2. **グローバル状態**:
   - Context APIを活用
   - 状態の更新ロジックを明確に分離
   - 適切なメモ化でパフォーマンスを最適化

3. **サーバー状態**:
   - サーバーコンポーネントを活用したデータフェッチング
   - クライアントコンポーネントではSWRまたはReact Queryを検討
   - エラー状態とローディング状態の適切な処理

## パフォーマンス最適化

1. **レンダリング最適化**:
   - 不要な再レンダリングを避ける（memo, useCallback, useMemo）
   - 大きなリストには仮想化を検討
   - Code SplittingとLazy Loadingを活用

2. **画像最適化**:
   - Next.js Imageコンポーネントを使用
   - 適切なサイズとフォーマットを指定
   - loading="lazy"属性の活用

3. **バンドルサイズ最適化**:
   - トリーシェイキングが効くように注意
   - 重いライブラリは必要な部分だけをインポート
   - 非同期インポートと遅延読み込みを検討

## ベストプラクティス

1. **コンポーネント設計**:
   - 単一責任の原則に従う
   - Props drilling を避ける（Context APIなどを活用）
   - コンポーネントは小さく、再利用可能に

2. **テスト**:
   - React Testing Libraryを使用したコンポーネントテスト
   - アクセシビリティのテスト
   - ユーザーインタラクションのテスト
   - スナップショットテスト

3. **ドキュメンテーション**:
   - コンポーネントの使用例を提供
   - PropsとAPIの明確な説明
   - Storybook等でのビジュアルドキュメント作成（必要に応じて）
